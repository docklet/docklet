#!/bin/bash

set -e

# $0 master root-1-0 10.0.1.0 192.168.4.12 br1 192.168.4.2
# $0 slave root-1-0 10.0.1.0
# $0 restart root-1-0
# $0 remove root-1-0

. /etc/docklet/docklet.conf

OS_CODENAME=$(cat /etc/lsb-release | grep ^DISTRIB_CODENAME= | cut -b 18-)

TYPE=$1 ; shift
UUID=$1 ; shift

USER_NAME=$(echo ${UUID} | awk -F\- '{print $1}')
NAT_ID=$(echo ${UUID} | awk -F\- '{print $2}')
NODE_ID=$(echo ${UUID} | awk -F\- '{print $3}')

TARGET="${NFS_PREFIX}/local/mounts/${USER_NAME}-${NAT_ID}"

if [[ "${TYPE}" == "master" ]]; then

	NAT_ID=${NAT_ID} USER_NAME=${USER_NAME} stone >/dev/null 2>&1 || true

	NATADDR=10.0.${NAT_ID}.${NODE_ID}
	
	IPADDR=$1 ; shift
	IPDEV=$1 ; shift
	IPGW=$1 ; shift
	IMAGE=$1 ; shift

	mkdir -p ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID} ${NFS_PREFIX}/global/users/${USER_NAME}/home/local
	
	cat <<EOF > ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc
lxc.pts = 1024
lxc.console = none
lxc.tty = 1
lxc.pivotdir = lxc_putold
lxc.rootfs = ${TARGET}
lxc.utsname = nat-master

lxc.network.type = veth
lxc.network.name = ethex
lxc.network.link = ${IPDEV}
lxc.network.ipv4 = ${IPADDR}
lxc.network.ipv4.gateway = ${IPGW}
lxc.network.flags = up

lxc.network.type = veth
lxc.network.name = eth0
lxc.network.link = ovs-bridge
lxc.network.ipv4 = ${NATADDR}/8
lxc.network.flags = up
lxc.network.mtu = 1420

lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 1:7 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

lxc.cgroup.memory.kmem.limit_in_bytes = 512m
lxc.cgroup.memory.limit_in_bytes = 4294967296
lxc.cgroup.memory.soft_limit_in_bytes = 4294967296
lxc.cgroup.memory.memsw.limit_in_bytes = 8589934592
lxc.cgroup.cpu.cfs_quota_us = ${CPU_SHARE_QUOTA_US}

lxc.mount.entry = proc ${TARGET}/proc proc nosuid,nodev,noexec 0 0
lxc.mount.entry = sysfs ${TARGET}/sys sysfs nosuid,nodev,noexec 0 0
lxc.mount.entry = devpts ${TARGET}/dev/pts devpts newinstance,ptmxmode=0666,nosuid,noexec 0 0

lxc.mount.entry = ${NFS_PREFIX}/local/dockerenv ${TARGET}/.dockerenv none bind,ro 0 0
lxc.mount.entry = /usr/local/bin/dockerinit ${TARGET}/.dockerinit none bind,ro 0 0
lxc.mount.entry = /usr/local/sbin/container-init ${TARGET}/init none bind,ro 0 0
lxc.mount.entry = /usr/local/sbin/container-docklet ${TARGET}/usr/bin/docklet none bind,ro 0 0

lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home ${TARGET}/nfs none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID} ${TARGET}/nfs/local none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/hosts-${NAT_ID} ${TARGET}/etc/hosts none bind,ro 0 0

EOF
	LAYER="${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID}"
	mkdir -p ${TARGET} ${LAYER}
	umount -l ${TARGET} ${LAYER} || true
	rm -rf ${LAYER}.img || true 
	
	dd if=/dev/zero of=${LAYER}.img bs=1M seek=4096 count=0 >/dev/null 2>&1
	echo y | mkfs.ext4 ${LAYER}.img >/dev/null 2>&1
	if ! mount ${LAYER}.img ${LAYER} >/dev/null 2>&1; then
		mount tmpfs ${LAYER} -t tmpfs -o size=3200m >/dev/null 2>&1
	fi
	
	[[ -e "${NFS_PREFIX}/global/images/pub_${IMAGE}.tgz" ]] && MOD="pub"
	[[ -e "${NFS_PREFIX}/global/images/self_${IMAGE}.tgz" ]] && MOD="self"
	[[ -e "${NFS_PREFIX}/global/images/${MOD}_${IMAGE}.tgz" ]]
	
	tar xvf "${NFS_PREFIX}/global/images/${MOD}_${IMAGE}.tgz" -C ${LAYER} >/dev/null
	if mountpoint -q ${TARGET}; then
		umount -l ${TARGET}
	fi
	mount -t aufs -o br=${LAYER}=rw:${NFS_PREFIX}/local/filesystem=ro+wh none ${TARGET}/
	
	mkdir -p ${TARGET}/root/.ssh
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/id_rsa ${TARGET}/root/.ssh/id_rsa
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/authorized_keys ${TARGET}/root/.ssh/authorized_keys
	chmod go-rw ${TARGET}/root/.ssh/id_rsa
	
	if [[ "${OS_CODENAME}" != "trusty" ]]; then
		nohup lxc-execute -n ${UUID} -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc -- /.dockerinit -- /init >/dev/null 2>&1 &
	else
		lxc-start -d -n ${UUID} -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc -- /.dockerinit -- /init
	fi
	
	# NSPID=$(cat "/sys/fs/cgroup/cpu/lxc/${UUID}/tasks" 2>/dev/null | head -n 1)
	# [[ "${NSPID}" == "" ]] && false
	
	# mkdir -p /var/run/netns
	# rm -f /var/run/netns/$NSPID
	# ln -s /proc/$NSPID/ns/net /var/run/netns/$NSPID
	# LOCAL_IFNAME=vethl$NSPID
	# GUEST_IFNAME=vethg$NSPID
	# ip link add name $LOCAL_IFNAME type veth peer name $GUEST_IFNAME
	# ip link set $LOCAL_IFNAME up
	# ip link set $GUEST_IFNAME netns $NSPID
	# ip netns exec $NSPID ip link set $GUEST_IFNAME name eth0
	# ip netns exec $NSPID ip addr add ${NATADDR}/8 dev eth0
	# ip netns exec $NSPID ip link set eth0 up
	# brctl addif ovs-bridge $LOCAL_IFNAME
	# rm -f /var/run/netns/$NSPID
	
elif [[ "${TYPE}" == "slave" ]]; then
	
	NATADDR=10.0.${NAT_ID}.${NODE_ID}

	MASTER_LOC=$1 ; shift

	LAYER="${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID}"
	mkdir -p ${TARGET}-${NODE_ID} ${LAYER}-${NODE_ID}

	umount -l ${LAYER}-${NODE_ID} ${TARGET}-${NODE_ID} || true
	rm -rf ${LAYER}-${NODE_ID}.img || true

	dd if=/dev/zero of=${LAYER}-${NODE_ID}.img bs=1M seek=4096 count=0 >/dev/null 2>&1
	echo y | mkfs.ext4 ${LAYER}-${NODE_ID}.img >/dev/null 2>&1
	if ! mount ${LAYER}-${NODE_ID}.img ${LAYER}-${NODE_ID} >/dev/null 2>&1; then
		mount tmpfs ${LAYER}-${NODE_ID} -t tmpfs -o size=3200m
	fi
	
	IMAGE=${MASTER_LOC}
	[[ -e "${NFS_PREFIX}/global/images/pub_${IMAGE}.tgz" ]] && MOD="pub"
	[[ -e "${NFS_PREFIX}/global/images/self_${IMAGE}.tgz" ]] && MOD="self"
	[[ -e "${NFS_PREFIX}/global/images/${MOD}_${IMAGE}.tgz" ]]
	tar xvf "${NFS_PREFIX}/global/images/${MOD}_${IMAGE}.tgz" -C ${LAYER}-${NODE_ID} >/dev/null
	mount -t aufs -o br=${LAYER}-${NODE_ID}=rw:${NFS_PREFIX}/local/filesystem=ro+wh none ${TARGET}-${NODE_ID}/
	
	# sshfs ${MASTER_LOC}:${LAYER} ${LAYER}-${NODE_ID}

	TARGET=${TARGET}-${NODE_ID}
	LAYER=${LAYER}-${NODE_ID}

	NAT_ID=${NAT_ID} USER_NAME=${USER_NAME} stone >/dev/null 2>&1 || true

	mkdir -p ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID} ${NFS_PREFIX}/global/users/${USER_NAME}/home/local

	mkdir -p ${NFS_PREFIX}/global/users/${USER_NAME}
	cat <<EOF > ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc
lxc.pts = 1024
lxc.console = none
lxc.tty = 1
lxc.pivotdir = lxc_putold
lxc.rootfs = ${TARGET}
lxc.utsname = nat-slave${NODE_ID}

lxc.network.type = veth
lxc.network.name = eth0
lxc.network.link = ovs-bridge
lxc.network.ipv4 = ${NATADDR}/8
lxc.network.ipv4.gateway = $(ip route | grep ovs-bridge | awk '{print $NF}')
lxc.network.flags = up
lxc.network.mtu = 1420

lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 1:7 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

lxc.cgroup.memory.kmem.limit_in_bytes = 512m
lxc.cgroup.memory.limit_in_bytes = 4294967296
lxc.cgroup.memory.soft_limit_in_bytes = 4294967296
lxc.cgroup.memory.memsw.limit_in_bytes = 8589934592
lxc.cgroup.cpu.cfs_quota_us = ${CPU_SHARE_QUOTA_US}

lxc.mount.entry = proc ${TARGET}/proc proc nosuid,nodev,noexec 0 0
lxc.mount.entry = sysfs ${TARGET}/sys sysfs nosuid,nodev,noexec 0 0
lxc.mount.entry = devpts ${TARGET}/dev/pts devpts newinstance,ptmxmode=0666,nosuid,noexec 0 0

lxc.mount.entry = ${NFS_PREFIX}/local/dockerenv ${TARGET}/.dockerenv none bind,ro 0 0
lxc.mount.entry = /usr/local/bin/dockerinit ${TARGET}/.dockerinit none bind,ro 0 0
lxc.mount.entry = /usr/local/sbin/container-init ${TARGET}/init none bind,ro 0 0
lxc.mount.entry = /usr/local/sbin/container-docklet ${TARGET}/usr/bin/docklet none bind,ro 0 0

lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home ${TARGET}/nfs none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/home/.docklet/nodes/${NODE_ID} ${TARGET}/nfs/local none rbind,rw 0 0
lxc.mount.entry = ${NFS_PREFIX}/global/users/${USER_NAME}/hosts-${NAT_ID} ${TARGET}/etc/hosts none bind,ro 0 0

EOF

	mkdir -p ${TARGET}/root/.ssh
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/id_rsa ${TARGET}/root/.ssh/id_rsa
	cp ${NFS_PREFIX}/global/users/${USER_NAME}/ssh_keys/authorized_keys ${TARGET}/root/.ssh/authorized_keys
	chmod go-rw ${TARGET}/root/.ssh/id_rsa

	if [[ "${OS_CODENAME}" != "trusty" ]]; then
		nohup lxc-execute -n ${UUID} -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc -- /.dockerinit -- /init >/dev/null 2>&1 &
	else
		lxc-start -d -n ${UUID} -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc -- /.dockerinit -- /init
	fi
	
elif [[ "${TYPE}" == "restart" ]]; then
	NAT_ID=${NAT_ID} USER_NAME=${USER_NAME} stone >/dev/null 2>&1 || true

	lxc-stop -k -n ${UUID} || true
	lxc-start -d -n ${UUID} -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc -- /.dockerinit -- /init
elif [[ "${TYPE}" == "stop" ]]; then
	lxc-stop -k -n ${UUID}
	if [[ "${NODE_ID}" != "0" ]]; then
		umount -l ${TARGET}-${NODE_ID} || true
		rmdir ${TARGET}-${NODE_ID} || true
		LAYER="${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID}"
		umount -l ${LAYER}-${NODE_ID} || true
		rmdir ${LAYER}-${NODE_ID} || true
		rm -f ${LAYER}-${NODE_ID}.img || true
	fi
	rm -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc
elif [[ "${TYPE}" == "purge" ]]; then
	umount -l ${NFS_PREFIX}/local/mounts/${USER_NAME}-${NAT_ID} || true
	umount -l ${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID} || true
	rm -rf ${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID} ${NFS_PREFIX}/local/mounts/${USER_NAME}-${NAT_ID} || true
	rm -f ${NFS_PREFIX}/global/users/${USER_NAME}/${UUID}.lxc || true
	rm -f ${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID}.img || true
elif [[ "${TYPE}" == "commit" ]]; then
	IMAGE_NAME=$1 ; shift
	cd ${NFS_PREFIX}/local/volumes/${USER_NAME}-${NAT_ID}
	rm -rf ./tmp ./var/cache/apt ./var/lib/apt ./root/.ssh ./etc/shadow* ./root/.vnc/passwd
	tar czvf ${NFS_PREFIX}/global/images/self_${USER_NAME}_${IMAGE_NAME}.tgz ./
	docklet-weave purge ${USER_NAME}-${NAT_ID}
elif [[ "${TYPE}" == "find" ]]; then
	lxc-info -n ${UUID} 2>/dev/null | grep RUNNING >/dev/null
elif [[ "${TYPE}" == "bridge" ]]; then

	[[ "${HOST}" != "" ]]
	
	cat <<EOF > ${NFS_PREFIX}/global/core.lxc
lxc.pts = 1024
lxc.console = none
lxc.tty = 1
lxc.pivotdir = lxc_putold
lxc.rootfs = ${NFS_PREFIX}/local/filesystem
lxc.utsname = core-service

lxc.network.type = veth
lxc.network.name = ethex
lxc.network.link = ${PORTAL_BRIDGE}
lxc.network.ipv4 = ${PORTAL_HTTP}/24
lxc.network.ipv4.gateway = ${PORTAL_GATEWAY}
lxc.network.flags = up

lxc.cgroup.devices.deny = a
lxc.cgroup.devices.allow = c *:* m
lxc.cgroup.devices.allow = b *:* m
lxc.cgroup.devices.allow = c 5:1 rwm
lxc.cgroup.devices.allow = c 4:0 rwm
lxc.cgroup.devices.allow = c 4:1 rwm
lxc.cgroup.devices.allow = c 136:* rwm
lxc.cgroup.devices.allow = c 5:2 rwm
lxc.cgroup.devices.allow = c 10:200 rwm
lxc.cgroup.devices.allow = c 1:3 rwm
lxc.cgroup.devices.allow = c 1:5 rwm
lxc.cgroup.devices.allow = c 1:7 rwm
lxc.cgroup.devices.allow = c 5:0 rwm
lxc.cgroup.devices.allow = c 1:9 rwm
lxc.cgroup.devices.allow = c 1:8 rwm

lxc.cgroup.memory.kmem.limit_in_bytes = 512m
lxc.cgroup.memory.limit_in_bytes = 4294967296
lxc.cgroup.memory.soft_limit_in_bytes = 4294967296
lxc.cgroup.memory.memsw.limit_in_bytes = 8589934592

lxc.mount.entry = proc ${NFS_PREFIX}/local/filesystem/proc proc nosuid,nodev,noexec 0 0
lxc.mount.entry = sysfs ${NFS_PREFIX}/local/filesystem/sys sysfs nosuid,nodev,noexec 0 0
lxc.mount.entry = devpts ${NFS_PREFIX}/local/filesystem/dev/pts devpts newinstance,ptmxmode=0666,nosuid,noexec 0 0

lxc.mount.entry = ${NFS_PREFIX}/local/dockerenv ${NFS_PREFIX}/local/filesystem/.dockerenv none bind,ro 0 0
lxc.mount.entry = /usr/local/bin/dockerinit ${NFS_PREFIX}/local/filesystem/.dockerinit none bind,ro 0 0
lxc.mount.entry = /root/.ssh/id_rsa ${NFS_PREFIX}/local/filesystem/root/.ssh/id_rsa none bind,ro 0 0
lxc.mount.entry = /root/.ssh/authorized_keys ${NFS_PREFIX}/local/filesystem/root/.ssh/authorized_keys none bind,ro 0 0
lxc.mount.entry = ${NFS_PREFIX} ${NFS_PREFIX}/local/filesystem/mnt none rbind,rw 0 0
lxc.mount.entry = /usr/local/lib/docklet-http ${NFS_PREFIX}/local/filesystem/usr/local/lib/docklet-http none rbind,ro 0 0

EOF

# lxc.mount.entry = shm ${NFS_PREFIX}/local/filesystem/dev/shm tmpfs size=65536k,nosuid,nodev,noexec 0 0
# lxc.mount.entry = /dev/random ${NFS_PREFIX}/local/filesystem/dev/random none bind,ro 0 0
# lxc.mount.entry = /dev/urandom ${NFS_PREFIX}/local/filesystem/dev/urandom none bind,ro 0 0
# lxc.mount.entry = /dev/null ${NFS_PREFIX}/local/filesystem/dev/null none bind,ro 0 0

	mkdir -p ${NFS_PREFIX}/local/filesystem/root/.ssh
	touch ${NFS_PREFIX}/local/filesystem/root/.ssh/id_rsa ${NFS_PREFIX}/local/filesystem/root/.ssh/authorized_keys
	
	if [[ "${OS_CODENAME}" != "trusty" ]]; then
		nohup lxc-execute -n ${UUID} -f ${NFS_PREFIX}/global/core.lxc -- /.dockerinit -- bash -c "/usr/local/lib/docklet-http/dl-httpinit ${HOST} ${NIS_SERVER}" > ${NFS_PREFIX}/dl-http.log 2>&1 &
	else
		nohup lxc-start -n ${UUID} -f ${NFS_PREFIX}/global/core.lxc -- /.dockerinit -- bash -c "/usr/local/lib/docklet-http/dl-httpinit ${HOST} ${NIS_SERVER}" > ${NFS_PREFIX}/dl-http.log 2>&1 &
	fi
	
else
	false
fi

