#!/usr/bin/python3

import os, sys, subprocess, time, re

def sys_call(command):
	output = subprocess.getoutput(command).strip()
	return None if output == '' else output

def etcd_lock():
	while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevExist=false -XPUT -d value=busy 2>/dev/null | grep errorCode') != None:
		time.sleep(0.5)

def etcd_unlock():
	while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevValue=busy -XDELETE 2>/dev/null | grep errorCode') != None:
		time.sleep(0.5)

def get_environ(names, quit=True):
	values = []
	for name in names:
		output = sys_call('dl-env %s' % name)
		if output == None:
			output = os.environ[name].strip()
		values.append(output)
	return values

def main(command):
	if command == 'create':
		[BRIDGE_DEV, BRIDGE_GW, IMAGE, BRIDGE_IP, USER_NAME, HOME_PREF, PORTAL_HTTP] = get_environ(["PORTAL_BRIDGE", "PORTAL_GATEWAY", "IMAGE", "BRIDGE_IP", "USER_NAME", "NFS_PREFIX", "PORTAL_HTTP"])
		
		if sys_call('KEY="/docklet/portal/%s/%s" etcdemu get 2>/dev/null' % (USER_NAME, BRIDGE_IP)) == 'inactive':
			
			sys_call('KEY="/docklet/portal/%s/%s" VALUE="active" etcdemu set' % (USER_NAME, BRIDGE_IP))
			
			NAT_ID = 1
			while sys_call('KEY=/docklet/instances/%d etcdemu get' % NAT_ID) != None:
				NAT_ID += 1
			sys_call('KEY="/docklet/instances/%d" VALUE="active" etcdemu set' % NAT_ID)
			
			MASTER_IP = '10.%d.%d.254' % (NAT_ID >> 8, NAT_ID & 255)
			HOST_NAME = 'nat-master'
			
			sys_call('mkdir -p %s/%s/home' % (HOME_PREF, USER_NAME))
			COMMON_HOST = '%s/%s/hosts-%d' % (HOME_PREF, USER_NAME, NAT_ID)
			
			host = open('%s/%s/hosts-%d' % (HOME_PREF, USER_NAME, NAT_ID), "w")
			host.write('127.0.0.1 localhost\n')
			host.write('%s docklet-cloud\n' % PORTAL_HTTP)
			host.write('%s host-%d_%s\n' % (BRIDGE_IP, NAT_ID, USER_NAME))
			host.write('%s %s\n' % (MASTER_IP, HOST_NAME))
			 
			TOTAL_MACHINE = sys_call('KEY="/_etcd/machines" etcdemu ls | awk -F\/ \'{print $NF}\'').split()
			WORK_ON = TOTAL_MACHINE[NAT_ID % len(TOTAL_MACHINE)]
			CONTAINER_ID = '%s-%d-0' % (USER_NAME, NAT_ID)
			
			sys_call('BRIDGE_DEV=%s BRIDGE_GW=%s BRIDGE_IP=%s USER_NAME=%s IMAGE=%s HOST_NAME=%s WORK_ON=%s NATIVE_IP=%s NAT_ID=%d NAME=%s cave' % (BRIDGE_DEV, BRIDGE_GW, BRIDGE_IP, USER_NAME, IMAGE, HOST_NAME, WORK_ON, MASTER_IP, NAT_ID, CONTAINER_ID))
			sys_call('KEY="/docklet/instances/%d" VALUE="%s|%s|%s|%s:%s:%s" etcdemu set' % (NAT_ID, USER_NAME, IMAGE, BRIDGE_IP, WORK_ON, CONTAINER_ID, MASTER_IP)) #### to add hostname
			print(NAT_ID)
		
	elif command == 'remove':
		[USER_NAME, NAT_ID, HOME_PREF] = get_environ(["USER_NAME", "NAT_ID", "NFS_PREFIX"])
		
		[OWNER, USE_IMAGE, BRIDGE_IP, DOCKER_LIST] = sys_call('KEY="/docklet/instances/%s" etcdemu get' % NAT_ID).split('|')
		if USER_NAME == OWNER:
			DOCKER_NODES = DOCKER_LIST.strip().split()
			for DOCKER_NODE in DOCKER_NODES:
				[DOCKER_IP, DOCKER_ID, NATIVE_IP] = DOCKER_NODE.split(':') #### to add hostname
				sys_call('nohup ssh -o StrictHostKeyChecking=no %s "docker stop %s; docker rm %s" >/dev/null 2>&1 &' % (DOCKER_IP, DOCKER_ID, DOCKER_ID))
				
			sys_call('KEY="/docklet/portal/%s/%s" VALUE="inactive" etcdemu set' % (USER_NAME, BRIDGE_IP))
			sys_call('KEY="/docklet/instances/%s" etcdemu rm' % NAT_ID)
			os.remove('%s/%s/hosts-%s' % (HOME_PREF, USER_NAME, NAT_ID))
		
	elif command == 'list':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		for ITEM in sys_call('KEY="/docklet/instances" etcdemu ls').split():
			NAT_ID = ITEM.split('/')[-1]
			DATAS = sys_call('KEY="/docklet/instances/%s" etcdemu get' % NAT_ID)
			OWNER = DATAS.split('|')[0]
			if USER_NAME == OWNER or USER_NAME == 'root':
				print('%s|%s' % (NAT_ID, DATAS))
		
	elif command == 'images':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		print(sys_call('USER_NAME=%s ham list_3v' % USER_NAME))
		
	elif command == 'save':
		[USER_NAME, NAT_ID, IMAGE_NAME] = get_environ(["USER_NAME", "NAT_ID", "IMAGE_NAME"])
		
		if re.match('^[0-9,a-z,\-]{1,20}$', IMAGE_NAME):
			GENERATE='%s_%s' % (USER_NAME, IMAGE_NAME)
			if sys_call('USER_NAME=%s ham list_3v | grep %s' % (USER_NAME, GENERATE)) != None:
				raise Exception("image already exists")
			[OWNER, USE_IMAGE, BRIDGE_IP, DOCKER_LIST] = sys_call('KEY="/docklet/instances/%s" etcdemu get' % NAT_ID).split('|')
			if OWNER != USER_NAME:
				raise Exception("wrong container owners")
			for NODE in DOCKER_LIST.strip().split():
				[ON, ID, NAT_IP] = NODE.split(':') #### to add hostname
				if NAT_IP.split('.')[-1] == '254': #### to add hostname
					sys_call('nohup ssh -o StrictHostKeyChecking=no %s "docker commit %s %s && ( lockfile-create /tmp/docklet-images-save; ham push_2v %s; lockfile-remove /tmp/docklet-images-save; )" >/dev/null 2>&1 &' % (ON, ID, GENERATE, GENERATE))
					break
		
	elif command == 'portal':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		LIST = sys_call('KEY="/docklet/portal/%s" etcdemu ls' % USER_NAME)
		if LIST == None:
			[AVAIL, MASK] = get_environ(["PORTAL_CIDR"])[0].split('/')
			while sys_call('etcdctl ls /docklet/portal --recursive | grep %s$' % AVAIL) != None:
				[a, b, c, d] = AVAIL.split('.')
				next = (int(a)<<24)+(int(b)<<16)+(int(c)<<8)+(int(d))+1
				AVAIL = "%d.%d.%d.%d" % (next>>24, (next>>16)&255, (next>>8)&255, next&255)
			sys_call('KEY="/docklet/portal/%s/%s" VALUE="inactive" etcdemu set' % (USER_NAME, AVAIL))
			print("%s:inactive" % AVAIL)
			
		else:
			for PORTAL in LIST.strip().split():
				IP = PORTAL.split('/')[-1]
				STATUS = sys_call('KEY="/docklet/portal/%s/%s" etcdemu get' % (USER_NAME, IP))
				print("%s:%s" % (IP, STATUS))
		
		# allow CMD: <app|list|rm>
		# portal-remove: KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu get 2>/dev/null | grep "inactive" >/dev/null && KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu rm
	else:
		print("Usage:\n\tBRIDGE_IP=.. USER_NAME=.. pocket create")

if __name__ == '__main__' and subprocess.getoutput("whoami") == 'root':
	try:
		etcd_lock()
		main(sys.argv[1])
	except Exception as ex:
		print(str(ex))
		pass
	finally:
		etcd_unlock()


