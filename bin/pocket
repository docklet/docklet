#!/usr/bin/python3

import os, sys, subprocess, time, re

def sys_call(command):
	output = subprocess.getoutput(command).strip()
	return None if output == '' else output

def etcd_lock():
	while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevExist=false -XPUT -d value=busy 2>/dev/null | grep errorCode') != None:
		time.sleep(0.5)

def etcd_unlock():
	while sys_call('curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevValue=busy -XDELETE 2>/dev/null | grep errorCode') != None:
		time.sleep(0.5)

def get_environ(names, quit=True):
	values = []
	for name in names:
		output = sys_call('dl-env %s' % name)
		if output == None:
			output = os.environ[name].strip()
		values.append(output)
	return values

def main(command):
	if command == 'create':
		[THIS_HOST, BRIDGE_DEV, BRIDGE_GW, IMAGE, BRIDGE_IP, USER_NAME, HOME_PREF, PORTAL_HTTP] = get_environ(["THIS_HOST", "PORTAL_BRIDGE", "PORTAL_GATEWAY", "IMAGE", "BRIDGE_IP", "USER_NAME", "NFS_PREFIX", "PORTAL_HTTP"])
		
		if sys_call('KEY="/docklet/portal/%s/%s" etcdemu get 2>/dev/null' % (USER_NAME, BRIDGE_IP)) == 'inactive':
			
			sys_call('KEY="/docklet/portal/%s/%s" VALUE="active" etcdemu set' % (USER_NAME, BRIDGE_IP))
			
			NAT_ID = 1
			while sys_call('KEY=/docklet/instances/%d etcdemu get 2>/dev/null' % NAT_ID) != None:
				NAT_ID += 1
			sys_call('KEY="/docklet/instances/%d" VALUE="active" etcdemu set' % NAT_ID)
			
			MASTER_IP = '10.%d.%d.0' % (NAT_ID >> 8, NAT_ID & 255)
			HOST_NAME = 'nat-master'
			
			sys_call('mkdir -p %s/global/users/%s/home' % (HOME_PREF, USER_NAME))
			COMMON_HOST = '%s/global/users/%s/hosts-%d' % (HOME_PREF, USER_NAME, NAT_ID)
			
			host = open(COMMON_HOST, "w")
			host.write('127.0.0.1 localhost\n')
			host.write('%s docklet-cloud\n' % PORTAL_HTTP)
			host.write('%s host-%d_%s\n' % (BRIDGE_IP, NAT_ID, USER_NAME))
			host.write('%s %s\n' % (MASTER_IP, HOST_NAME))
			host.close()
			
			CONTAINER_ID = '%s-%d-0' % (USER_NAME, NAT_ID)
			
			sys_call('docklet-weave master %s %s/24 %s %s %s >/dev/null 2>&1' % (CONTAINER_ID, BRIDGE_IP, BRIDGE_DEV, BRIDGE_GW, IMAGE))
			
			sys_call('KEY="/docklet/instances/%d" VALUE="%s|%s|%s|%s:%s:%s:%s" etcdemu set' % (NAT_ID, USER_NAME, IMAGE, BRIDGE_IP, THIS_HOST, CONTAINER_ID, MASTER_IP, HOST_NAME))
			print(NAT_ID)
		
	elif command == 'list':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		INST = sys_call('KEY="/docklet/instances" etcdemu ls')
		if INST != None:
			for ITEM in INST.split():
				NAT_ID = ITEM.split('/')[-1]
				DATAS = sys_call('KEY="/docklet/instances/%s" etcdemu get' % NAT_ID)
				OWNER = DATAS.split('|')[0]
				if USER_NAME == OWNER or USER_NAME == 'root':
					print('%s|%s' % (NAT_ID, DATAS))
		
	elif command == 'images':
		[USER_NAME, HOME_PREF] = get_environ(["USER_NAME", "NFS_PREFIX"])
		
		for image in sys_call('ls %s/global/images/ 2>/dev/null' % HOME_PREF).strip().split():
			[mod, owner, img] = image.split('_')
			if mod == 'pub' or USER_NAME == 'root' or USER_NAME == owner: 
				print(image[:-4])
	
	elif command == 'rmi':
		[USER_NAME, HOME_PREF, IMAGE] = get_environ(["USER_NAME", "NFS_PREFIX", "IMAGE"])
		if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE):
			raise Exception("image name not allowed")
		sys_call('rm -rf %s/global/images/*_%s_%s.tgz' % (HOME_PREF, USER_NAME, IMAGE))
	
	elif command == 'chi':
		[USER_NAME, HOME_PREF, IMAGE] = get_environ(["USER_NAME", "NFS_PREFIX", "IMAGE"])
		if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE):
			raise Exception("image name not allowed")
		origin = sys_call('echo %s/global/images/*_%s_%s.tgz 2>/dev/null' % (HOME_PREF, USER_NAME, IMAGE))
		if origin == None or origin.find('*')!=-1:
			raise Exception("image not exists")
		mod = origin.split('/')[-1].split('_')[0]
		new_mod = 'pub' if mod == 'self' else 'self'
		sys_call('mv %s/global/images/%s_%s_%s.tgz %s/global/images/%s_%s_%s.tgz 2>/dev/null' % (HOME_PREF, mod, USER_NAME, IMAGE, HOME_PREF, new_mod, USER_NAME, IMAGE))
		
	elif command == 'save':
		[USER_NAME, NAT_ID, HOME_PREF] = get_environ(["USER_NAME", "NAT_ID", "NFS_PREFIX"])
		
		try:
			[IMAGE_NAME] = get_environ(["IMAGE_NAME"])
		except:
			IMAGE_NAME = None
		
		if IMAGE_NAME != None:
			if not re.match('^[0-9,a-z,\-]{1,20}$', IMAGE_NAME):
				raise Exception("image name not allowed")
			GENERATE = '%s_%s' % (USER_NAME, IMAGE_NAME)
			LOCALTION = '%s/global/images/%s_%s.tgz' % (HOME_PREF, '%s', GENERATE)
			if os.path.exists(LOCALTION % 'pub') or os.path.exists(LOCALTION % 'self'):
				raise Exception("image already exists")
		
		[OWNER, USE_IMAGE, BRIDGE_IP, DOCKER_LIST] = sys_call('KEY="/docklet/instances/%s" etcdemu get' % NAT_ID).split('|')
		if OWNER != USER_NAME:
			raise Exception("wrong container owners")
		
		for DOCKER_NODE in DOCKER_LIST.strip().split():
			[DOCKER_IP, DOCKER_ID, NATIVE_IP, HOST_NAME] = DOCKER_NODE.split(':')
			sys_call('docklet-weave stop %s' % DOCKER_ID)
		if IMAGE_NAME != None:
			sys_call('docklet-weave commit %s-%s %s' % (USER_NAME, NAT_ID, IMAGE_NAME))
		sys_call('docklet-weave purge %s-%s' % (USER_NAME, NAT_ID))
		
		sys_call('KEY="/docklet/portal/%s/%s" VALUE="inactive" etcdemu set' % (USER_NAME, BRIDGE_IP))
		sys_call('KEY="/docklet/instances/%s" etcdemu rm' % NAT_ID)
		os.remove('%s/global/users/%s/hosts-%s' % (HOME_PREF, USER_NAME, NAT_ID))
		
	elif command == 'portal':
		[USER_NAME] = get_environ(["USER_NAME"])
		
		LIST = sys_call('KEY="/docklet/portal/%s" etcdemu ls' % USER_NAME)
		if LIST == None:
			sys_call('etcdctl mkdir /docklet/portal')
			[AVAIL, MASK] = get_environ(["PORTAL_CIDR"])[0].split('/')
			while sys_call('etcdctl ls /docklet/portal --recursive 2>/dev/null | grep %s$' % AVAIL) != None:
				[a, b, c, d] = AVAIL.split('.')
				next = (int(a)<<24)+(int(b)<<16)+(int(c)<<8)+(int(d))+1
				AVAIL = "%u.%u.%u.%u" % (next>>24, (next>>16)&255, (next>>8)&255, next&255)
			sys_call('KEY="/docklet/portal/%s/%s" VALUE="inactive" etcdemu set' % (USER_NAME, AVAIL))
			print("%s:inactive" % AVAIL)
			
		else:
			for PORTAL in LIST.strip().split():
				IP = PORTAL.split('/')[-1]
				STATUS = sys_call('KEY="/docklet/portal/%s/%s" etcdemu get' % (USER_NAME, IP))
				print("%s:%s" % (IP, STATUS))
		
		# allow CMD: <app|list|rm>
		# portal-remove: KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu get 2>/dev/null | grep "inactive" >/dev/null && KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu rm
	else:
		print("Wrong Usage.")

if __name__ == '__main__' and subprocess.getoutput("whoami") == 'root':
	try:
		etcd_lock()
		main(sys.argv[1])
		code = 0
	except Exception as ex:
		print(str(ex))
		code = 1
	finally:
		etcd_unlock()
	sys.exit(code)

