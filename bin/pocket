#!/bin/bash

# BRIDGE_IP=192.168.4.200 USER_NAME=root pocket create
# NAT_ID=1 pocket remove

. /etc/docklet/docklet.conf

HOME_PREF=${NFS_PREFIX}

if [[ "$@" == "" ]]; then
	echo "Usage:"
	echo "  1. BRIDGE_IP=<BRIDGE_IP> USER_NAME=<root|..> $0 create"
	echo "  2. NAT_ID=<PORTAL_ID> $0 remove"
	echo "  3. USER_NAME=<root|..> $0 list"
	echo "  3. USER_NAME=<root|..> CMD=<app|rm|list> [BRIDGE_IP=<ip>] $0 portal"
	echo "  4. $0 images"
	exit 1
fi

[[ "`whoami`" != "root" ]] && echo "Root previledge required!" && exit 1
[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && exit 1


function enter {
	while [[ "`curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevExist=false -XPUT -d value=busy 2>/dev/null | grep errorCode`" != "" ]]; do sleep 0.2; done;
}

function release {
	while [[ "`curl -L http://0.0.0.0:4001/v2/keys/docklet/lock?prevValue=busy -XDELETE 2>/dev/null | grep errorCode`" != "" ]]; do sleep 0.2; done;
}

function enter_fine {
	while [[ "`curl -L http://0.0.0.0:4001/v2/keys/docklet/lock.${USER_NAME}?prevExist=false -XPUT -d value=busy 2>/dev/null | grep errorCode`" != "" ]]; do sleep 0.2; done;
}

function release_fine {
	while [[ "`curl -L http://0.0.0.0:4001/v2/keys/docklet/lock.${USER_NAME}?prevValue=busy -XDELETE 2>/dev/null | grep errorCode`" != "" ]]; do sleep 0.2; done;
}


function leave {
	release
	
	exit $1
}

function next_portal {
	IP="$@"

	MASK=`echo ${PORTAL_CIDR} | awk -F\/ '{print $2}'`

	MASK_BIT=$(( (1<<32-${MASK})-1 ))

	IP_NUM1=`echo ${IP} | awk -F\. '{print $1}'`
	IP_NUM2=`echo ${IP} | awk -F\. '{print $2}'`
	IP_NUM3=`echo ${IP} | awk -F\. '{print $3}'`
	IP_NUM4=`echo ${IP} | awk -F\. '{print $4}'`

	IP_BIT=$(( (${IP_NUM1}<<24)|(${IP_NUM2}<<16)|(${IP_NUM3}<<8)|${IP_NUM4} ))
	IP_TOP=$(( ${IP_BIT}|${MASK_BIT} ))

	while (( ${IP_BIT}+1 < ${IP_TOP} )); do

		IP_BIT=$(( ${IP_BIT}+1 ))
		
		IP_GEN4=$(( ${IP_BIT} & 0xff ))
		
		[[ "${IP_GEN4}" == "0" ]] && continue
		[[ "${IP_GEN4}" == "1" ]] && continue
		[[ "${IP_GEN4}" == "2" ]] && continue
		[[ "${IP_GEN4}" == "255" ]] && continue
		
		IP_GEN3=$(( (${IP_BIT} & 0xff00) >> 8 ))
		IP_GEN2=$(( (${IP_BIT} & 0xff0000) >> 16 ))
		IP_GEN1=$(( (${IP_BIT} & 0xff000000) >> 24 ))
		
		echo "${IP_GEN1}.${IP_GEN2}.${IP_GEN3}.${IP_GEN4}" && exit 0
	done
	exit 1
}


enter

if [[ "$@" == "create" ]]; then

	BRIDGE_DEV=${PORTAL_BRIDGE}
	BRIDGE_GW=${PORTAL_GATEWAY}
	
	[[ "${IMAGE}" == "" ]]      && echo "IMAGE (like, unios) not specified!" && leave 1
	[[ "${BRIDGE_IP}" == "" ]] && echo "BRIDGE_IP (like, 192.168.4.x) not specified!" && leave 1
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	EXIST=$(KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu get 2>/dev/null | grep "inactive")
	if [[ "${EXIST}" != "" ]]; then
		KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" VALUE="active" etcdemu set
		
		LIVE_HOSTS="$(KEY='/_etcd/machines' etcdemu ls | awk -F\/ '{print $NF}')"

		export USER_NAME BRIDGE_IP BRIDGE_GW BRIDGE_DEV IMAGE

		FREE_NAT=1 || true
		while [[ "`KEY=/docklet/instances/${FREE_NAT} etcdemu get`" != "" ]]; do
			let FREE_NAT=FREE_NAT+1
			# [[ "${FREE_NAT}" == "65536" ]] && FREE_NAT=0 || true
		done

		KEY="/docklet/instances/${FREE_NAT}" VALUE="prepare" etcdemu set || true
		
		release

		let SECOND=${FREE_NAT}/256 || true
		let THIRD=${FREE_NAT}%256 || true

		echo "[INFO] NAT selected: 10.${SECOND}.${THIRD}.0/24, Native Master IP: 10.${SECOND}.${THIRD}.254" > /dev/stderr
		echo "[INFO] Launching cluster among physcal machines: ${LIVE_HOSTS}" > /dev/stderr

		MASTER_IP="10.${SECOND}.${THIRD}.254"
		HOST_NAME=nat-master
		
		mkdir -p "${HOME_PREF}/${USER_NAME}"
		COMMON_HOST="${HOME_PREF}/${USER_NAME}/hosts-${FREE_NAT}"
		echo "127.0.0.1 localhost" > ${COMMON_HOST}
		echo "${PORTAL_HTTP} docklet-cloud" >> ${COMMON_HOST}
		echo "${BRIDGE_IP} host-${FREE_NAT}_${USER_NAME}" >> ${COMMON_HOST}
		echo "${MASTER_IP} ${HOST_NAME}" >> ${COMMON_HOST}
		
		TOTAL_MACHINE=$(echo "${LIVE_HOSTS}" | wc -w)
		
		RANDOM_HOST=$(echo "${LIVE_HOSTS}" | head -n $(((${RANDOM})%${TOTAL_MACHINE}+1)) | tail -n 1)
		
		CONTAINER_ID=${USER_NAME}-${FREE_NAT}-0
		HOST_NAME=${HOST_NAME} WORK_ON=${RANDOM_HOST} NATIVE_IP=${MASTER_IP} NAT_ID=${FREE_NAT} NAME=${CONTAINER_ID} cave
		
		RESULT="${RANDOM_HOST}:${CONTAINER_ID}:${MASTER_IP}"
		
		enter
		
		KEY="/docklet/instances/${FREE_NAT}" VALUE="${USER_NAME}|${IMAGE}|${BRIDGE_IP}|${RESULT}" etcdemu set || true
		
		echo "[INFO] Type 'KEY=/docklet/instances/${FREE_NAT} etcdemu get' to see cluster detail" > /dev/stderr
		echo "[INFO] Type 'KEY=/_etcd/machines etcdemu ls' to see real machine list" > /dev/stderr
		
		echo ${FREE_NAT}
		
	fi
	
elif [[ "$@" == "remove" ]]; then
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	[[ "${NAT_ID}" == "" ]] && echo "NAT_ID (like, 2) not specified!" && leave 1
	
	DATAS=$(KEY="/docklet/instances/${NAT_ID}" etcdemu get)

	[[ "`echo ${DATAS} | awk -F\| '{print $1}'`" != "${USER_NAME}" ]] && leave 1

	DOCKER_LIST=$(echo ${DATAS} | awk -F\| '{print $4}')
	BRIDGE_IP=$(echo ${DATAS} | awk -F\| '{print $3}')
	USE_IMAGE=$(echo ${DATAS} | awk -F\| '{print $2}')

	KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" VALUE="inactive" etcdemu set
		
	for DOCKER_PAIR in ${DOCKER_LIST}; do
		DOCKER_IP=$(echo ${DOCKER_PAIR} | awk -F':' '{print $1}')
		DOCKER_ID=$(echo ${DOCKER_PAIR} | awk -F':' '{print $2}')
		echo "[INFO] Deleting Docker ${DOCKER_ID} on ${DOCKER_IP} ..." > /dev/stderr
		nohup ssh -o StrictHostKeyChecking=no ${DOCKER_IP} "docker stop ${DOCKER_ID}; docker rm ${DOCKER_ID}" >/dev/null 2>&1 &
		# ssh -o StrictHostKeyChecking=no ${DOCKER_IP} docker rmi ${USE_IMAGE} 2>/dev/null || true
	done
	KEY="/docklet/instances/${NAT_ID}" etcdemu rm
	
	rm -rf "${HOME_PREF}/${USER_NAME}/hosts-${NAT_ID}"
	
elif [[ "$@" == "list" ]]; then
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	
	LISTS=$(KEY="/docklet/instances" etcdemu ls | grep -v go)
	for ITEM in ${LISTS}; do
		ID=$(basename ${ITEM})
		DATAS=$(KEY="/docklet/instances/${ID}" etcdemu get)
		KV_USER=$(echo ${DATAS} | awk -F\| '{print $1}')
		if [[ "${KV_USER}" == "${USER_NAME}" ]] || [[ "root" == "${USER_NAME}" ]]; then
			echo "${ID}|${DATAS}"
		fi
	done
	
elif [[ "$@" == "images" ]]; then
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	#docker images | grep -v zettio/weave | grep -v REPO | awk '{print $1 ":" $(NF-1) $NF}'
	USER_NAME=${USER_NAME} ham list_3v
elif [[ "$@" == "portal" ]]; then
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	[[ "${CMD}" == "" ]] && echo "CMD (like, <app|rm|list>) not specified!" && leave 1
	[[ "${CMD}" == "rm" ]] && [[ "${BRIDGE_IP}" == "" ]] && echo "BRIDGE_IP (like, 192.168.4.x) not specified!" && leave 1
	
	if [[ "${CMD}" == "app" ]]; then
		AVAIL=$(echo ${PORTAL_CIDR} | awk -F\/ '{print $1}')
		while AVAIL=`next_portal ${AVAIL}`; do
			[[ "`etcdctl ls /docklet/portal --recursive | grep ${AVAIL}`" == "" ]] && break
		done
		FLOATINGS=${AVAIL}
		[[ "${FLOATINGS}" == "" ]] && echo "[ERROR] No more free portals to allocate!" > /dev/stderr
		#AVAIL=$(echo "${AVAIL}" | sed "s/ ${FLOATINGS}//")
		#KEY="/docklet/portal/free" VALUE="${AVAIL}" etcdemu set
		KEY="/docklet/portal/${USER_NAME}/${FLOATINGS}" VALUE="inactive" etcdemu set
		echo "${FLOATINGS}"
		
	elif [[ "${CMD}" == "list" ]]; then
		LIST=$(KEY="/docklet/portal/${USER_NAME}" etcdemu ls)
		if [[ "${LIST}" != "" ]]; then
			for LINE in ${LIST}; do
				IP=$(basename ${LINE})
				echo ${IP}:$(KEY="/docklet/portal/${USER_NAME}/${IP}" etcdemu get)
			done
		fi
		
	elif [[ "${CMD}" == "rm" ]]; then
		EXIST=$(KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu get 2>/dev/null | grep "inactive")
		if [[ "${EXIST}" != "" ]]; then
			KEY="/docklet/portal/${USER_NAME}/${BRIDGE_IP}" etcdemu rm
			#AVAIL="$(KEY='/docklet/portal/free' etcdemu get) ${BRIDGE_IP}"
			#KEY='/docklet/portal/free' VALUE="${AVAIL}" etcdemu set
		fi
	fi
elif [[ "$@" == "save" ]]; then
	[[ "${USER_NAME}" == "" ]] && echo "USER_NAME (like, root) not specified!" && leave 1
	[[ "${NAT_ID}" == "" ]] && echo "NAT_ID (like, 1) not specified!" && leave 1
	[[ "${IMAGE_NAME}" == "" ]] && echo "IMAGE_NAME (like, test) not specified!" && leave 1
	
	if [[ "${IMAGE_NAME}" =~ ^[0-9,a-z,\-]{1,20}$ ]]; then
		release
		enter_fine
		GENERATE="${USER_NAME}_${IMAGE_NAME}"
	
		FLAGS="yes"
	
		if [[ "`USER_NAME=${USER_NAME} ham list_3v | grep ${GENERATE}`" == "" ]]; then
			DATAS=$(KEY="/docklet/instances/${NAT_ID}" etcdemu get)
			if [[ "${DATAS}" != "" ]]; then
				KV_USER=$(echo ${DATAS} | awk -F\| '{print $1}')
				if [[ "${KV_USER}" == "${USER_NAME}" ]]; then
					NODES=$(echo ${DATAS} | awk -F\| '{print $4}')
					for NODE in ${NODES}; do
						if [[ "`echo ${NODE} | awk -F\: '{print $3}' | awk -F\. '{print $4}'`" == "254" ]]; then
							FLAGS="no"
						
							ON=$(echo ${NODE} | awk -F\: '{print $1}')
							ID=$(echo ${NODE} | awk -F\: '{print $2}')
						
							nohup ssh -o StrictHostKeyChecking=no ${ON} "docker commit ${ID} ${GENERATE} && ( lockfile-create /tmp/docklet-images-save; ham push_2v ${GENERATE}; lockfile-remove /tmp/docklet-images-save; )" >/dev/null 2>&1 &
							# ssh -o StrictHostKeyChecking=no ${ON} docker rmi ${GENERATE}
							echo ${ID}
							break
						fi
					done
				fi
			fi
		fi
	
		release_fine
		[[ "${FLAGS}" == "yes" ]] && exit 1
		enter
	fi
fi

leave 0

