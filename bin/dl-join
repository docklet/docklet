#!/bin/bash

set -e

function log_msg {
	TYPE=$1 && shift && COLOR=35
	[[ "${TYPE}" == "INFO" ]] && COLOR=34
	[[ "${TYPE}" == "WARN" ]] && COLOR=33
	[[ "${TYPE}" == "ERROR" ]] && COLOR=31
	echo -e "\033[${COLOR}m[${TYPE}] $@\033[0m" > /dev/stderr
	[[ "${TYPE}" == "ERROR" ]] && exit 1
	return 0
}

log_msg "INFO" "Docklet Cluster for Ubuntu distribution x86_64."

[[ "`uname -a | grep x86_64`" == "" ]] && log_msg "ERROR" "Only x86_64-arch is supported."

[[ "`whoami`" != "root" ]] && log_msg "ERROR" "Root previledge required!"

. /etc/docklet/docklet.conf

if [[ "`which etcd 2>/dev/null`" == "" ]]; then
	apt-get install -y cgroup-lite lxc ethtool debootstrap python-pampy bridge-utils libapparmor1 nmap curl sshfs netcat-openbsd net-tools openssh-server
	curl -L "http://docklet.unias.org/docklet-bin-latest.tar.gz" > /tmp/docklet-bin.tgz
	
	cd /usr/local/bin
	tar xvf /tmp/docklet-bin.tgz
	mv libdevmapper.so.1.02.1 /lib/x86_64-linux-gnu
	rm -f /tmp/docklet-bin.tgz
fi

if [[ "`cat /proc/cmdline | grep cgroup`" == "" ]]; then
	if [[ "`cat /etc/default/grub | grep cgroup`" == "" ]]; then
		echo 'GRUB_CMDLINE_LINUX="cgroup_enable=memory swapaccount=1"' >> /etc/default/grub
		update-grub > /dev/stderr
	fi
	log_msg "ERROR" "Memory limit will be enabled after your next reboot, you should reboot system and run dl-join again. Otherwise memory limit will not work."
fi

ip link delete lxcbr0 >/dev/null 2>&1 || true

if [[ "${MACHINE_CIDR}" == "172.31.0.1/32" ]]; then
	log_msg "WARN" "Setting up for localhost."
	ip link delete dev ethlo 2>/dev/null || true
	brctl addbr ethlo
	ip addr add 172.31.0.1/16 dev ethlo
	ip link set dev ethlo up
	
	if [[ ! -e "/root/.ssh/id_rsa" ]] && [[ ! -e "/root/.ssh/authorized_keys" ]]; then
		mv /root/.ssh/id_rsa /root/.ssh/id_rsa.bak 2>/dev/null || true
		mv /root/.ssh/id_rsa.pub /root/.ssh/id_rsa.pub.bak 2>/dev/null || true
		mv /root/.ssh/authorized_keys /root/.ssh/authorized_keys.bak 2>/dev/null || true
		
		echo -e '\n' | ssh-keygen -t rsa -P '' >/dev/null 2>&1
		mv /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
	fi
	
	iptables -t nat -D POSTROUTING -s 172.31.0.0/16 ! -o docker0 -j MASQUERADE >/dev/null 2>&1 || true
	iptables -t nat -A POSTROUTING -s 172.31.0.0/16 ! -o docker0 -j MASQUERADE
	
	ssh root@0.0.0.0 true
fi

log_msg "INFO" "Finish setting up."

# nc -q 0 0.0.0.0 7001 </dev/null >/dev/null 2>&1 && echo "running." > /dev/stderr && exit 1

UNIONS=$(echo -e "`blink ${MACHINE_CIDR}`\n`ip addr | grep inet\  | awk '{print $2}' | awk -F\/ '{print $1}'`" | sort)

for MY_IP in ${UNIONS}; do
	[[ "${PREV_IP}" == "${MY_IP}" ]] && break
	PREV_IP=${MY_IP}
done

log_msg "INFO" "IP of this host is ${MY_IP}."

docklet-weave stop >/dev/null 2>&1 || true
killall docker >/dev/null 2>&1 || true
killall etcd >/dev/null 2>&1 || true
killall python >/dev/null 2>&1 || true
killall killall lxc-start >/dev/null 2>&1 || true

log_msg "INFO" "Make sure all docker resources are released .."
sleep 5

umount -l /var/lib/docker/devicemapper >/dev/null 2>&1 || true
rm -rf /var/lib/docker

DOCKER_DNS=""
for DNS in ${DNS_SERVERS}; do
	DOCKER_DNS="${DOCKER_DNS} --dns ${DNS}"
done

log_msg "WARN" "docker -d --icc=false ${DOCKER_DNS} -e lxc -s devicemapper --storage-opt dm.basesize=${TOTAL_DISK_LIMIT}"
nohup docker -d --icc=false ${DOCKER_DNS} -e lxc -s devicemapper --storage-opt dm.basesize=${TOTAL_DISK_LIMIT} >/dev/null 2>&1 &

mkdir -p ${NFS_PREFIX}
umount -l ${NFS_PREFIX} >/dev/null 2>&1 || true
`${NFS_MOUNT_CMD}`

HOSTS="`blink ${MACHINE_CIDR}`"
PEERS=""
for MIP in $HOSTS; do
        if nc -q 0 $MIP 7001 </dev/null >/dev/null 2>&1; then
                PEERS="--peers $MIP:7001"
		echo "[INFO] Machine discovery: ${MIP}" > /dev/stderr
                break
        fi
done

mkdir -p ${NFS_PREFIX}/global && cd ${NFS_PREFIX}/global

if [[ "${PEERS}" == "" ]]; then
	rm -rf ${NFS_PREFIX}/global/etcd
	if [[ "`USER_NAME=root ham list_3v`" == "" ]]; then
		mkdir -p ${NFS_PREFIX}/global/images
		ln -s /usr/local/bin/pub_root_base.tgz ${NFS_PREFIX}/global/images
		# dl-imgbuild
	fi
fi

log_msg "WARN" "etcd -peer-addr ${MY_IP}:7001 -addr ${MY_IP}:4001 -data-dir etcd/${MY_IP} -name ${MY_IP} ${PEERS}"
nohup etcd -peer-addr ${MY_IP}:7001 -addr ${MY_IP}:4001 -data-dir etcd/${MY_IP} -name ${MY_IP} ${PEERS} >/dev/null 2>&1 &

log_msg "INFO" "Waiting docker to get ready .." && sleep 2

HOST=${MY_IP} docklet-watchdog


