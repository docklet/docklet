#!/bin/bash

set -e

[[ "`whoami`" != "root" ]] && echo "Root previledge required!" && exit 1

. /etc/docklet/docklet.conf

if [[ "`which etcd 2>/dev/null`" == "" ]]; then
	apt-get install -y lxc ethtool python-pampy bridge-utils libapparmor1 nmap curl sshfs netcat-openbsd net-tools openssh-server
	
	curl -L "${BIN_SOURCE}" > /tmp/docklet-bin.tgz
	
	cd /usr/local/bin
	tar xvf /tmp/docklet-bin.tgz
	rm -f /tmp/docklet-bin.tgz
	
	if [[ "${MACHINE_CIDR}" == "127.0.0.1/32" ]]; then
		echo "[INFO] Setting up for localhost." > /dev/stderr
		ip link delete ethlo || true
		brctl addbr ethlo
		ifconfig ethlo 172.31.0.1/16
		
		mv /root/.ssh/id_rsa /root/.ssh/id_rsa.bak || true
		mv /root/.ssh/id_rsa.pub /root/.ssh/id_rsa.pub.bak || true
		mv /root/.ssh/authorized_keys /root/.ssh/authorized_keys.bak || true
		
		echo -e '\n' | ssh-keygen -t rsa -P ''
		mv /root/.ssh/id_rsa.pub /root/.ssh/authorized_keys
	fi
	
	echo "[INFO] Finish setting up." > /dev/stderr
fi

#
#nc -q 0 0.0.0.0 7001 </dev/null >/dev/null 2>&1 && echo "running." > /dev/stderr && exit 1

UNIONS=$(echo -e "`blink ${MACHINE_CIDR}`\n`ip addr | grep inet\  | awk '{print $2}' | awk -F\/ '{print $1}'`" | sort)

for MY_IP in ${UNIONS}; do
	[[ "${PREV_IP}" == "${MY_IP}" ]] && break
	PREV_IP=${MY_IP}
done

echo "[INFO] this host ip is ${MY_IP}" > /dev/stderr

docklet-weave stop >/dev/null 2>&1 || true
killall docker >/dev/null 2>&1 || true
killall etcd >/dev/null 2>&1 || true
killall python >/dev/null 2>&1 || true
killall killall lxc-start >/dev/null 2>&1 || true

echo "[INFO] Make sure all docker resources are releases .." > /dev/stderr
sleep 5

umount -l /var/lib/docker/devicemapper >/dev/null 2>&1 || true
rm -rf /var/lib/docker

echo "[INFO] docker -d -e lxc -s devicemapper --storage-opt dm.basesize=${TOTAL_DISK_LIMIT}" > /dev/stderr
nohup docker -d -e lxc -s devicemapper --storage-opt dm.basesize=${TOTAL_DISK_LIMIT} >/dev/null 2>&1 &

mkdir -p ${NFS_PREFIX}
umount -l ${NFS_PREFIX} >/dev/null 2>&1 || true
`${NFS_MOUNT_CMD}`

HOSTS="`blink ${MACHINE_CIDR}`"
PEERS=""
for MIP in $HOSTS; do
        if nc -q 0 $MIP 7001 </dev/null >/dev/null 2>&1; then
                PEERS="--peers $MIP:7001"
		echo "[INFO] Machine discovery: ${MIP}" > /dev/stderr
                break
        fi
done

mkdir -p ${NFS_PREFIX}/global && cd ${NFS_PREFIX}/global
echo "[INFO] etcd -peer-addr ${MY_IP}:7001 -addr ${MY_IP}:4001 -data-dir etcd/${MY_IP} -name ${MY_IP} ${PEERS}" >/dev/stderr

[[ "${PEERS}" == "" ]] && rm -rf ${NFS_PREFIX}/global/etcd

nohup etcd -peer-addr ${MY_IP}:7001 -addr ${MY_IP}:4001 -data-dir etcd/${MY_IP} -name ${MY_IP} ${PEERS} >/dev/null 2>&1 &

if [[ "${PEERS}" == "" ]]; then
	ham load /usr/local/bin/pub_root_base.tgz
	
	echo "[INFO] waiting etcd to get ready .." > /dev/stderr && sleep 5

	etcdctl rm "/docklet" --recursive >/dev/null 2>&1 || true
	
	KEY="/docklet/lockfile" VALUE="ready" etcdemu set
fi

echo "[INFO] waiting docker to get ready .." > /dev/stderr && sleep 2

if [[ "${PEERS}" == "" ]]; then
	CIDR=${PORTAL_CENTRE} CGW=${PORTAL_GATEWAY} CBR=${PORTAL_BRIDGE} docklet-weave launch centre
	
	service nginx stop 2>/dev/null || true
	service apache2 stop 2>/dev/null || true

	nohup docklet-http >/dev/null 2>&1 &
else
	docklet-weave launch ${PORTAL_CENTRE}
fi
