#!/usr/bin/env python

# Usage: ./wssh --host proxyhost --port 5000 user@real-hostip --password

import os, sys, signal, errno
import websocket, select, json
import termios, tty, fcntl, struct
import platform, argparse, getpass, urllib2

class ConnectionError(Exception):
	pass

def _pty_size():
	rows, cols = 24, 80
	# Can't do much for Windows
	if platform.system() == 'Windows':
		return rows, cols
	fmt = 'HH'
	buffer = struct.pack(fmt, 0, 0)
	result = fcntl.ioctl(sys.stdout.fileno(), termios.TIOCGWINSZ,
		buffer)
	rows, cols = struct.unpack(fmt, result)
	return rows, cols

def _resize(ws):
	rows, cols = _pty_size()
	ws.send(json.dumps({'resize': {'width': cols, 'height': rows}}))

def invoke_shell(endpoint):
	ssh = websocket.create_connection(endpoint)
	_resize(ssh)
	oldtty = termios.tcgetattr(sys.stdin)
	old_handler = signal.getsignal(signal.SIGWINCH)

	def on_term_resize(signum, frame):
		_resize(ssh)
	signal.signal(signal.SIGWINCH, on_term_resize)

	try:
		tty.setraw(sys.stdin.fileno())
		tty.setcbreak(sys.stdin.fileno())

		rows, cols = _pty_size()
		ssh.send(json.dumps({'resize': {'width': cols, 'height': rows}}))

		while True:
			try:
				r, w, e = select.select([ssh.sock, sys.stdin], [], [])
				if ssh.sock in r:
					data = ssh.recv()
					if not data:
						break
					message = json.loads(data)
					if 'error' in message:
						raise ConnectionError(message['error'])
					sys.stdout.write(message['data'])
					sys.stdout.flush()
				if sys.stdin in r:
					x = sys.stdin.read(1)
					if len(x) == 0:
						break
					ssh.send(json.dumps({'data': x}))
			except (select.error, IOError) as e:
				if e.args and e.args[0] == errno.EINTR:
					pass
				else:
					raise
	except websocket.WebSocketException:
		raise
	finally:
		termios.tcsetattr(sys.stdin, termios.TCSADRAIN, oldtty)
		signal.signal(signal.SIGWINCH, old_handler)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        description='wssh - SSH Over WebSockets Client')

    parser.add_argument('--host', '-H',
        help='WSSH server host (default: 127.0.0.1)',
        default='127.0.0.1')

    parser.add_argument('--port', '-P',
        help='WSSH server port (default: 5000)',
        type=int,
        default=5000)

    parser.add_argument('--password', '-p',
        nargs='?',
        const='',
        help='Password-based authentication. ' \
            'If no password is provided you will be prompted for one')

    parser.add_argument('--key', '-k',
        nargs='?',
        const='',
        help='Private key authentication. ' \
            'Selects a file from which the private key ' \
            'for RSA or DSA authentication is read.  ' \
            'The default is ~/.ssh/id_rsa and ~/.ssh/id_dsa.')

    parser.add_argument('--key-passphrase', '-K',
            nargs='?',
            const='',
            help='Provide a passphrase for encrypted private key files.')

    parser.add_argument('--ssh-port', '-s',
            type=int,
            default=22,
            help='Ssh to server host"s port')

    parser.add_argument('destination',
        help='[user@]hostname')

    parser.add_argument('command',
        nargs='*',
        help='optional command to be executed')

    args = parser.parse_args()

    if '@' in args.destination:
        (username, hostname) = args.destination.split('@', 1)
    else:
        (username, hostname) = (getpass.getuser(), args.destination)

    if args.password == '':
        password = getpass.getpass('Password: ')
    else:
        password = args.password

    if args.key_passphrase == '':
        key_passphrase = getpass.getpass('Enter passphrase for private key: ')
    else:
        key_passphrase = args.key_passphrase

    key = None
    if args.key == '':
        key_files = ['~/.ssh/id_rsa', '~/.ssh/id_dsa']
        for path in key_files:
            path = os.path.expanduser(path)
            if os.path.exists(path):
                key = file(path).read()
                break
        if key is None:
            print >> sys.stderr, 'Error: Unable to locate identity file {0}' \
                .format(' or '.join(key_files))
            sys.exit(1)
    elif args.key is not None:
        if not os.path.exists(args.key):
            print >> sys.stderr, 'Error: Identity file "{0}" does not exist' \
                .format(args.key)
            sys.exit(1)
        key = file(args.key).read()

    params = {
        'password': password,
        'port': str(args.ssh_port),
        'private_key': key,
        'key_passphrase': key_passphrase,
        'run': ' '.join(args.command) if args.command else None,
    }

    # Filter empty parameters
    params = dict(filter(lambda (k, v): v is not None, params.iteritems()))

    endpoint = 'ws://{serv_host}:{serv_port}/wssh/{host}/{user}?{params}' \
        .format(
            serv_host=args.host,
            serv_port=args.port,
            host=urllib2.quote(hostname),
            user=urllib2.quote(username),
            params='&'.join(['{0}={1}'.format(k, urllib2.quote(v))
            for (k, v) in params.iteritems()]))

    try:
        invoke_shell(endpoint)
    except ConnectionError as e:
        print >>sys.stderr, 'wssh: {0}'.format(e.message or 'Connection error')
    else:
        print >>sys.stderr, 'Connection to {0} closed.'.format(hostname)
